package Rekisteri.test;
// Generated by ComTest BEGIN
import Rekisteri.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.05.16 21:27:51 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class PelaajatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa73 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa73() throws SailoException {    // Pelaajat: 73
    Pelaajat pelaajat = new Pelaajat(); 
    Pelaaja sasu1 = new Pelaaja(), sasu2 = new Pelaaja(); 
    assertEquals("From: Pelaajat line: 78", 0, pelaajat.getLkm()); 
    pelaajat.lisaa(sasu1); 
    assertEquals("From: Pelaajat line: 80", 1, pelaajat.getLkm()); 
    pelaajat.lisaa(sasu2); 
    assertEquals("From: Pelaajat line: 82", 2, pelaajat.getLkm()); 
    pelaajat.lisaa(sasu1); 
    assertEquals("From: Pelaajat line: 84", 3, pelaajat.getLkm()); 
    Iterator<Pelaaja> it = pelaajat.iterator(); 
    assertEquals("From: Pelaajat line: 86", sasu1, it.next()); 
    assertEquals("From: Pelaajat line: 87", sasu2, it.next()); 
    assertEquals("From: Pelaajat line: 88", sasu1, it.next()); 
    pelaajat.lisaa(sasu1); 
    assertEquals("From: Pelaajat line: 90", 4, pelaajat.getLkm()); 
    pelaajat.lisaa(sasu1); 
    assertEquals("From: Pelaajat line: 92", 5, pelaajat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa109 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa109() throws SailoException,CloneNotSupportedException {    // Pelaajat: 109
    Pelaajat pelaajat = new Pelaajat(); 
    Pelaaja sasu1 = new Pelaaja(), sasu2 = new Pelaaja(); 
    sasu1.rekisteroi(); sasu2.rekisteroi(); 
    assertEquals("From: Pelaajat line: 115", 0, pelaajat.getLkm()); 
    pelaajat.korvaaTaiLisaa(sasu1); assertEquals("From: Pelaajat line: 116", 1, pelaajat.getLkm()); 
    pelaajat.korvaaTaiLisaa(sasu2); assertEquals("From: Pelaajat line: 117", 2, pelaajat.getLkm()); 
    Pelaaja sasu3 = sasu1.clone(); 
    Iterator<Pelaaja> it = pelaajat.iterator(); 
    assertEquals("From: Pelaajat line: 120", true, it.next() == sasu1); 
    pelaajat.korvaaTaiLisaa(sasu3); assertEquals("From: Pelaajat line: 121", 2, pelaajat.getLkm()); 
    it = pelaajat.iterator(); 
    Pelaaja p0 = it.next(); 
    assertEquals("From: Pelaajat line: 124", sasu3, p0); 
    assertEquals("From: Pelaajat line: 125", true, p0 == sasu3); 
    assertEquals("From: Pelaajat line: 126", false, p0 == sasu1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista160 
   * @throws SailoException when error
   */
  @Test
  public void testPoista160() throws SailoException {    // Pelaajat: 160
    Pelaajat pelaajat = new Pelaajat(); 
    Pelaaja sasu1 = new Pelaaja(), sasu2 = new Pelaaja(), sasu3 = new Pelaaja(); 
    sasu1.rekisteroi(); sasu2.rekisteroi(); sasu3.rekisteroi(); 
    pelaajat.lisaa(sasu1); pelaajat.lisaa(sasu2); pelaajat.lisaa(sasu3); 
    int id1 = sasu1.getTunnusNro(); 
    assertEquals("From: Pelaajat line: 167", 1, pelaajat.poista(id1+1)); 
    assertEquals("From: Pelaajat line: 168", null, pelaajat.annaId(id1+1)); assertEquals("From: Pelaajat line: 168", 2, pelaajat.getLkm()); 
    assertEquals("From: Pelaajat line: 169", 1, pelaajat.poista(id1)); assertEquals("From: Pelaajat line: 169", 1, pelaajat.getLkm()); 
    assertEquals("From: Pelaajat line: 170", 0, pelaajat.poista(id1+3)); assertEquals("From: Pelaajat line: 170", 1, pelaajat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta191 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta191() throws SailoException {    // Pelaajat: 191
    Pelaajat pelaajat = new Pelaajat(); 
    Pelaaja sasu1 = new Pelaaja(), sasu2 = new Pelaaja(); 
    sasu1.taytaTiedoillaSasuToivonen(); 
    sasu2.taytaTiedoillaSasuToivonen(); 
    String hakemisto = "testirekisteri"; 
    String tiedNimi = hakemisto+"/nimet"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    pelaajat.lueTiedostosta(tiedNimi); 
    fail("Pelaajat: 206 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    pelaajat.lisaa(sasu1); 
    pelaajat.lisaa(sasu2); 
    pelaajat.tallenna(); 
    pelaajat = new Pelaajat();  // Poistetaan vanhat luomalla uusi
    pelaajat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Pelaaja> i = pelaajat.iterator(); 
    assertEquals("From: Pelaajat line: 213", sasu1, i.next()); 
    assertEquals("From: Pelaajat line: 214", sasu2, i.next()); 
    assertEquals("From: Pelaajat line: 215", false, i.hasNext()); 
    pelaajat.lisaa(sasu2); 
    pelaajat.tallenna(); 
    assertEquals("From: Pelaajat line: 218", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Pelaajat line: 220", true, fbak.delete()); 
    assertEquals("From: Pelaajat line: 221", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPelaajatIterator331 
   * @throws SailoException when error
   */
  @Test
  public void testPelaajatIterator331() throws SailoException {    // Pelaajat: 331
    Pelaajat pelaajat = new Pelaajat(); 
    Pelaaja sasu1 = new Pelaaja(), sasu2 = new Pelaaja(); 
    sasu1.rekisteroi(); sasu2.rekisteroi(); 
    pelaajat.lisaa(sasu1); 
    pelaajat.lisaa(sasu2); 
    pelaajat.lisaa(sasu1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Pelaaja pelaaja:pelaajat) // for-silmukan toimivuus
    ids.append(" "+pelaaja.getTunnusNro()); 
    String tulos = " " + sasu1.getTunnusNro() + " " + sasu2.getTunnusNro() + " " + sasu1.getTunnusNro(); 
    assertEquals("From: Pelaajat line: 350", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Pelaaja>  i=pelaajat.iterator(); i.hasNext(); ) { // iteraattorin toimivuus
    Pelaaja pelaaja = i.next(); 
    ids.append(" "+pelaaja.getTunnusNro()); 
    }
    assertEquals("From: Pelaajat line: 358", tulos, ids.toString()); 
    Iterator<Pelaaja>  i=pelaajat.iterator(); 
    assertEquals("From: Pelaajat line: 361", true, i.next() == sasu1); 
    assertEquals("From: Pelaajat line: 362", true, i.next() == sasu2); 
    assertEquals("From: Pelaajat line: 363", true, i.next() == sasu1); 
    try {
    i.next(); 
    fail("Pelaajat: 365 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi425 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi425() throws SailoException {    // Pelaajat: 425
    Pelaajat Pelaajat = new Pelaajat(); 
    Pelaaja pelaaja1 = new Pelaaja(); pelaaja1.parse("1|Sasu Toivonen|Sasuke"); 
    Pelaaja pelaaja2 = new Pelaaja(); pelaaja2.parse("2|Liisa Saaristo|Lisa"); 
    Pelaaja pelaaja3 = new Pelaaja(); pelaaja3.parse("3|Topi MÃ¤ki|Topi"); 
    Pelaaja pelaaja4 = new Pelaaja(); pelaaja4.parse("4|Linda Toivo|Lindi"); 
    Pelaaja pelaaja5 = new Pelaaja(); pelaaja5.parse("5|Kati Lohja|Kati"); 
    Pelaajat.lisaa(pelaaja1); Pelaajat.lisaa(pelaaja2); Pelaajat.lisaa(pelaaja3); Pelaajat.lisaa(pelaaja4); Pelaajat.lisaa(pelaaja5); 
    List<Pelaaja> loytyneet; 
    loytyneet = (List<Pelaaja>)Pelaajat.etsi("*s*",1); 
    assertEquals("From: Pelaajat line: 436", 2, loytyneet.size()); 
    assertEquals("From: Pelaajat line: 437", true, loytyneet.get(0) == pelaaja2); 
    assertEquals("From: Pelaajat line: 438", true, loytyneet.get(1) == pelaaja1); 
    loytyneet = (List<Pelaaja>)Pelaajat.etsi("*l*",2); 
    assertEquals("From: Pelaajat line: 441", 2, loytyneet.size()); 
    assertEquals("From: Pelaajat line: 442", true, loytyneet.get(0) == pelaaja4); 
    assertEquals("From: Pelaajat line: 443", true, loytyneet.get(1) == pelaaja2); 
    loytyneet = (List<Pelaaja>)Pelaajat.etsi(null,-1); 
    assertEquals("From: Pelaajat line: 446", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId467 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId467() throws SailoException {    // Pelaajat: 467
    Pelaajat pelaajat = new Pelaajat(); 
    Pelaaja sasu1 = new Pelaaja(), sasu2 = new Pelaaja(), sasu3 = new Pelaaja(); 
    sasu1.rekisteroi(); sasu2.rekisteroi(); sasu3.rekisteroi(); 
    int id1 = sasu1.getTunnusNro(); 
    pelaajat.lisaa(sasu1); pelaajat.lisaa(sasu2); pelaajat.lisaa(sasu3); 
    assertEquals("From: Pelaajat line: 474", true, pelaajat.annaId(id1  ) == sasu1); 
    assertEquals("From: Pelaajat line: 475", true, pelaajat.annaId(id1+1) == sasu2); 
    assertEquals("From: Pelaajat line: 476", true, pelaajat.annaId(id1+2) == sasu3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId491 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId491() throws SailoException {    // Pelaajat: 491
    Pelaajat pelaajat = new Pelaajat(); 
    Pelaaja sasu1 = new Pelaaja(), sasu2 = new Pelaaja(), sasu3 = new Pelaaja(); 
    sasu1.rekisteroi(); sasu2.rekisteroi(); sasu3.rekisteroi(); 
    int id1 = sasu1.getTunnusNro(); 
    pelaajat.lisaa(sasu1); pelaajat.lisaa(sasu2); pelaajat.lisaa(sasu3); 
    assertEquals("From: Pelaajat line: 498", 1, pelaajat.etsiId(id1+1)); 
    assertEquals("From: Pelaajat line: 499", 2, pelaajat.etsiId(id1+2)); 
  } // Generated by ComTest END
}