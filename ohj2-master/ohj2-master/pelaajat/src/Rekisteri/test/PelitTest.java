package Rekisteri.test;
// Generated by ComTest BEGIN
import Rekisteri.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.05.14 18:56:08 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class PelitTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa41 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa41() throws SailoException,CloneNotSupportedException {    // Pelit: 41
    Pelit pelit = new Pelit(); 
    Peli peli1 = new Peli(), peli2 = new Peli(); 
    peli1.rekisteroi(); peli2.rekisteroi(); 
    assertEquals("From: Pelit line: 47", 0, pelit.getLkm()); 
    pelit.korvaaTaiLisaa(peli1); assertEquals("From: Pelit line: 48", 1, pelit.getLkm()); 
    pelit.korvaaTaiLisaa(peli2); assertEquals("From: Pelit line: 49", 2, pelit.getLkm()); 
    Peli peli3 = peli1.clone(); 
    peli3.aseta(2,"kkk"); 
    Iterator<Peli> i2=pelit.iterator(); 
    assertEquals("From: Pelit line: 53", peli1, i2.next()); 
    pelit.korvaaTaiLisaa(peli3); assertEquals("From: Pelit line: 54", 2, pelit.getLkm()); 
    i2=pelit.iterator(); 
    Peli p = i2.next(); 
    assertEquals("From: Pelit line: 57", peli3, p); 
    assertEquals("From: Pelit line: 58", true, p == peli3); 
    assertEquals("From: Pelit line: 59", false, p == peli1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta117 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta117() throws SailoException {    // Pelit: 117
    Pelit videopelit = new Pelit(); 
    Peli freddy21 = new Peli(); freddy21.taytaTiedoillaFreddy(2); 
    Peli freddy22 = new Peli(); freddy22.taytaTiedoillaFreddy(1); 
    Peli freddy23 = new Peli(); freddy23.taytaTiedoillaFreddy(2); 
    Peli freddy24 = new Peli(); freddy24.taytaTiedoillaFreddy(1); 
    String tiedNimi = "testirekisteri"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    videopelit.lueTiedostosta(tiedNimi); 
    fail("Pelit: 128 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    videopelit.lisaa(freddy21); 
    videopelit.lisaa(freddy22); 
    videopelit.lisaa(freddy23); 
    videopelit.lisaa(freddy24); 
    videopelit.tallenna(); 
    videopelit = new Pelit(); 
    videopelit.lueTiedostosta(tiedNimi); 
    Iterator<Peli> i = videopelit.iterator(); 
    assertEquals("From: Pelit line: 137", freddy21.toString(), i.next().toString()); 
    assertEquals("From: Pelit line: 138", freddy22.toString(), i.next().toString()); 
    assertEquals("From: Pelit line: 139", freddy23.toString(), i.next().toString()); 
    assertEquals("From: Pelit line: 140", freddy24.toString(), i.next().toString()); 
    assertEquals("From: Pelit line: 141", false, i.hasNext()); 
    videopelit.lisaa(freddy23); 
    videopelit.tallenna(); 
    assertEquals("From: Pelit line: 144", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Pelit line: 146", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator185 */
  @Test
  public void testIterator185() {    // Pelit: 185
    Pelit videopelit = new Pelit(); 
    Peli freddy21 = new Peli(1); videopelit.lisaa(freddy21); 
    Peli freddy22 = new Peli(1); videopelit.lisaa(freddy22); 
    Peli freddy23 = new Peli(1); videopelit.lisaa(freddy23); 
    Peli freddy24 = new Peli(2); videopelit.lisaa(freddy24); 
    Iterator<Peli> iter = videopelit.iterator(); 
    assertEquals("From: Pelit line: 197", freddy21, iter.next()); 
    assertEquals("From: Pelit line: 198", freddy22, iter.next()); 
    assertEquals("From: Pelit line: 199", freddy23, iter.next()); 
    assertEquals("From: Pelit line: 200", freddy24, iter.next()); 
    try {
    assertEquals("From: Pelit line: 201", freddy21, iter.next()); 
    fail("Pelit: 201 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int nrot[] = { 1,1,1,2} ; 
    for ( Peli peli:videopelit ) {
    assertEquals("From: Pelit line: 207", nrot[n], peli.getJasenNro()); n++; 
    }
    assertEquals("From: Pelit line: 209", 4, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaPelit269 */
  @Test
  public void testAnnaPelit269() {    // Pelit: 269
    Pelit videopelit = new Pelit(); 
    Peli freddy21 = new Peli(1); videopelit.lisaa(freddy21); 
    Peli freddy22 = new Peli(1); videopelit.lisaa(freddy22); 
    Peli freddy23 = new Peli(1); videopelit.lisaa(freddy23); 
    Peli freddy24 = new Peli(2); videopelit.lisaa(freddy24); 
    List<Peli> loydetyt; 
    loydetyt = videopelit.annaPelit(3); 
    assertEquals("From: Pelit line: 282", 0, loydetyt.size()); 
    loydetyt = videopelit.annaPelit(1); 
    assertEquals("From: Pelit line: 285", 3, loydetyt.size()); 
    assertEquals("From: Pelit line: 286", true, loydetyt.get(0) == freddy21); 
    assertEquals("From: Pelit line: 287", true, loydetyt.get(1) == freddy22); 
    assertEquals("From: Pelit line: 288", true, loydetyt.get(2) == freddy23); 
    assertEquals("From: Pelit line: 289", false, loydetyt.get(2) == freddy24); 
    loydetyt = videopelit.annaPelit(2); 
    assertEquals("From: Pelit line: 292", 1, loydetyt.size()); 
    assertEquals("From: Pelit line: 293", true, loydetyt.get(0) == freddy24); 
    assertEquals("From: Pelit line: 294", false, loydetyt.get(0) == freddy21); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista311 
   * @throws SailoException when error
   */
  @Test
  public void testPoista311() throws SailoException {    // Pelit: 311
    Pelit pelit = new Pelit(); 
    Peli freddy021 = new Peli(); freddy021.taytaTiedoillaFreddy(2); 
    Peli freddy011 = new Peli(); freddy011.taytaTiedoillaFreddy(1); 
    Peli freddy022 = new Peli(); freddy022.taytaTiedoillaFreddy(2); 
    Peli freddy012 = new Peli(); freddy012.taytaTiedoillaFreddy(1); 
    Peli freddy023 = new Peli(); 
    pelit.lisaa(freddy021); 
    pelit.lisaa(freddy011); 
    pelit.lisaa(freddy022); 
    pelit.lisaa(freddy012); 
    assertEquals("From: Pelit line: 324", false, pelit.poista(freddy023)); assertEquals("From: Pelit line: 324", 4, pelit.getLkm()); 
    assertEquals("From: Pelit line: 325", true, pelit.poista(freddy011)); assertEquals("From: Pelit line: 325", 3, pelit.getLkm()); 
    List<Peli> p = pelit.annaPelit(1); 
    assertEquals("From: Pelit line: 327", 1, p.size()); 
    assertEquals("From: Pelit line: 328", freddy012, p.get(0)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaPelaajanPelit343 */
  @Test
  public void testPoistaPelaajanPelit343() {    // Pelit: 343
    Pelit videopelit = new Pelit(); 
    Peli freddy21 = new Peli(); freddy21.taytaTiedoillaFreddy(2); 
    Peli freddy11 = new Peli(); freddy11.taytaTiedoillaFreddy(1); 
    Peli freddy22 = new Peli(); freddy22.taytaTiedoillaFreddy(2); 
    Peli freddy12 = new Peli(); freddy12.taytaTiedoillaFreddy(1); 
    Peli freddy23 = new Peli(); freddy23.taytaTiedoillaFreddy(2); 
    videopelit.lisaa(freddy21); 
    videopelit.lisaa(freddy11); 
    videopelit.lisaa(freddy22); 
    videopelit.lisaa(freddy12); 
    videopelit.lisaa(freddy23); 
    assertEquals("From: Pelit line: 355", 3, videopelit.poistaPelaajanPelit(2)); assertEquals("From: Pelit line: 355", 2, videopelit.getLkm()); 
    assertEquals("From: Pelit line: 356", 0, videopelit.poistaPelaajanPelit(3)); assertEquals("From: Pelit line: 356", 2, videopelit.getLkm()); 
    List<Peli> p = videopelit.annaPelit(2); 
    assertEquals("From: Pelit line: 358", 0, p.size()); 
    p = videopelit.annaPelit(1); 
    assertEquals("From: Pelit line: 360", freddy11, p.get(0)); 
    assertEquals("From: Pelit line: 361", freddy12, p.get(1)); 
  } // Generated by ComTest END
}